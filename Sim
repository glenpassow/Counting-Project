from random import randint

#This is where the user inputs the variables for the simulated run
N = int(input("Input N (300-1000): The number of parts in the final production run"))
D = int(input("Input D (3-9): The cost of fixing a bad part for the production run"))
G = int(input("Input G (96-99): The % of good parts made if 0 adjustments needed"))
K = int(input("Input K (88-92): The % of good parts made if 1 adjustment needed"))
W = int(input("Input W (78-84): The % of good parts made if 2 adjustments needed"))
M = int(input("Input M (50-100): The cost of bringing the master mechanic"))
S = int(input("Input S (2-6): The cost per sample part"))
situation = int(input("Put in a 1 for situation 1 (call the mechanic), a 2 for situation 2 (Send it and don't call the mechanic), or 3 for sutation 3 (run a sample of parts)"))

if situation == 3:
    P = int(input("Input the number of parts to be sampled"))
    
#Variables are created to track the number of good and bad parts for the actual run and sample run
PB = 0
PG = 0
SB = 0
SG = 0

#The users inputed information is displayed again for their viewing pleasure.
for x in range (0,50):
    print(" ")
    
print("N - The number of parts in the final production run = ",N,)
print("D - The cost of fixing a bad part for the production run = ",D,)
print("G - The % of good parts made if 0 adjustments needed =  ",G,)
print("K - The % of good parts made if 1 adjustment needed = ",K,)
print("W - The % of good parts made if 2 adjustments needed = ",W,)
print("M - The cost of bringing the master mechanic = ",M,)
print("S - The cost of bringing the master mechanic = ",S,)
print("The chosen situation is: situation #",situation,)
print("")
print("")

if situation == 3:
    print("The number of parts to be samples is: ",P,)

#A random number is generated to determine how many adjustments on the machine need fixing.
case = randint(0,100)
print("The random value used to choose the case is: ",case,)    

#The code that runs to make a simulated cost for strategy 1
if situation == 1:
    while PB + PG < N:
        GOB = randint(0,100)
        if GOB > G:
            PB = PB + 1
        else:
            PG = PG + 1
    
    cost = M + PB*D

#The code that runs to make a simulated cost for strategy 2
if situation == 2:
    #determine the number of good and bad parts for situation 2
    while PB + PG < N:
        GOB = randint(0,100)
        if case <= 80:
            if GOB > G:
                PB = PB + 1
        if case > 95:
            if GOB > W:
                PB = PB + 1
        if case > 80 and case <= 95:
            if GOB > K:
                 PB = PB + 1
        else:
            PG = PG + 1
    cost = PB*D

#The code that runs to make a simulated cost for strategy 3
if situation == 3:
    while SB + SG < P:
        GOB = randint(0,100)
        if case <= 80:
            if GOB > G:
                SB = SB + 1
            else:
                SG = SG + 1
            
        if case > 95:
            if GOB > W:
                SB = SB + 1
            else:
                SG = SG + 1
        if case > 80 and case <= 95:
            if GOB > K:
                 SB = SB + 1
            else:
                SG = SG + 1
    if SB > 0:
        while PB + PG < N:
            GOB = randint(0,100)
            if GOB > G:
                PB = PB + 1
            else:
                PG = PG + 1
        cost = P*S + M + D*PB
    else:
        while PB + PG < N:
            GOB = randint(0,100)
            if case <= 80:
                if GOB > G:
                    PB = PB + 1
                else:
                    PG = PG + 1
            if case > 95:
                if GOB > W:
                    PB = PB + 1
                else:
                    PG = PG + 1
            if case > 80 and case <= 95:
                if GOB > K:
                     PB = PB + 1
                else:
                    PG = PG + 1
        cost = S*P + D*PB
    print("Sampled parts good: ",SG,)
    print("Sampled parts bad: ",SB,)    

#The final text at the end of the simulation
print("Number of good parts made: ",PG,)
print("Number of bad parts made: ",PB,)
print(" ")
print("The total cost for this simulated production run was: ",cost,)